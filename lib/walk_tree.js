// Generated by CoffeeScript 1.6.3
(function() {
  var abspath, copyFile, copyTree, fs, path, walk, walkTree;

  fs = require('fs');

  path = require('path');

  abspath = function(fn) {
    return path.resolve(__dirname, fn);
  };

  copyFile = function(path_from, path_to) {
    var data;
    data = fs.readFileSync(path_from);
    fs.writeFileSync(path_to, data);
    return null;
  };

  walkTree = function(dir, f_match, f_visit) {
    var _walk_tree;
    _walk_tree = function(dir) {
      var err, fn, fns, _i, _len;
      fns = fs.readdirSync(dir);
      for (_i = 0, _len = fns.length; _i < _len; _i++) {
        fn = fns[_i];
        fn = path.join(dir, fn);
        if (f_match(fn)) {
          try {
            f_visit(fn);
          } catch (_error) {
            err = _error;
            console.log("error visiting " + fn);
            throw err;
          }
        }
        if (fs.statSync(fn).isDirectory()) {
          _walk_tree(fn);
        }
      }
      return null;
    };
    return _walk_tree(dir);
  };

  copyTree = function(dir_from, dir_to, f_match) {
    var e, fn, fns, path_from, path_to, _i, _len;
    if (fs.existsSync(dir_to) !== true) {
      fs.mkdirSync(dir_to);
    }
    fns = fs.readdirSync(dir_from);
    for (_i = 0, _len = fns.length; _i < _len; _i++) {
      fn = fns[_i];
      path_from = path.join(dir_from, fn);
      path_to = path.join(dir_to, fn);
      if (fs.statSync(path_from).isDirectory()) {
        console.log('copying dir ' + path_from + ' to ' + path_to);
        fs.mkdirSync(path_to);
        copyTree(path_from, path_to, f_match);
      } else if (f_match(fn)) {
        try {
          console.log('copying ' + path_from + ' to ' + path_to);
          copyFile(path_from, path_to);
        } catch (_error) {
          e = _error;
          console.log('Error creating ' + path_to + ' --skipped');
        }
      }
    }
    return null;
  };

  walk = function(dir) {
    var dir_list, _walk;
    dir_list = [];
    _walk = function(dir) {
      var dirname, dirs, files, fn, fns, list_item, path_fn, _i, _len;
      fns = fs.readdirSync(dir);
      dirs = [];
      files = [];
      dirname = abspath(dir);
      list_item = [dirname, dirs, files];
      for (_i = 0, _len = fns.length; _i < _len; _i++) {
        fn = fns[_i];
        path_fn = path.join(dirname, fn);
        if (fs.statSync(path_fn).isDirectory()) {
          dirs.push(fn);
          _walk(path_fn);
        } else {
          files.push(fn);
        }
      }
      dir_list.push(list_item);
      return null;
    };
    _walk(dir);
    return dir_list;
  };

  module.exports = {
    copyTree: copyTree,
    walkTree: walkTree,
    walk: walk
  };

}).call(this);
